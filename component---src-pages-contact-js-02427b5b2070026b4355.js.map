{"version":3,"file":"component---src-pages-contact-js-02427b5b2070026b4355.js","mappings":"qIAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,EAAG,IACHC,EAAG,MACFC,EAAAA,EAAAA,MAAsBN,EAAMO,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBP,EAAYG,EAAG,KAAM,4HAA6H,KAAMI,EAAAA,cAAoBP,EAAYG,EAAG,KAAM,yBAA0BI,EAAAA,cAAoBP,EAAYI,EAAG,CACjUI,KAAM,kCACL,eAAgB,KAAM,KAAMD,EAAAA,cAAoBP,EAAYG,EAAG,KAAM,yDAC1E,CAKA,IAJA,SAAoBJ,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOU,QAASC,GAAaT,OAAOC,OAAO,CAAC,GAAGG,EAAAA,EAAAA,MAAsBN,EAAMO,YAC3E,OAAOI,EAAYH,EAAAA,cAAoBG,EAAWX,EAAOQ,EAAAA,cAAoBT,EAAmBC,IAAUD,EAAkBC,EAC9H,C,kFCQA,UAhBkB,IAEd,gBAAC,IAAM,KAEL,2BAASY,UAAWC,EAAAA,GAClB,uBAAKD,UAAWE,EAAAA,GACd,0BAAI,SACJ,gBAAC,IAAW,Q,8ECbf,IAAID,EAAY,iCACZC,EAAkB,uC,sEC+BtB,MAAMC,EAAa,gBAAoB,CAAC,GAiCxC,SAASC,EAAiBT,GAC/B,MAAMU,EAAoB,aAAiBF,GAG3C,OAAO,WAAc,IAEO,mBAAfR,EACFA,EAAWU,GAGb,IAAIA,KAAsBV,IAChC,CAACU,EAAmBV,GACzB,C","sources":["webpack://cloudqubes/./pages/contat.mdx","webpack://cloudqubes/./src/pages/contact.js","webpack://cloudqubes/./src/pages/about.module.css","webpack://cloudqubes/./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"I am a writer, blogger, and a DevOps practitioner.\\nI write on Cloud computing, Kubernetes, CI/CD, DevOps, MLOps, AIOps.\"), \"\\n\", React.createElement(_components.p, null, \"Contact me on twitter \", React.createElement(_components.a, {\n    href: \"https://twitter.com/cloudqubes\"\n  }, \"@cloudqubes\"), \".\"), \"\\n\", React.createElement(_components.p, null, \"Email: Cloudqubes [at] gmail.com. (Replace at with @)\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import * as React from \"react\"\nimport { Link } from \"gatsby\";\nimport Layout from \"../components/layout\";\nimport ContactText from \"../../pages/contat.mdx\";\nimport { container, insideContainer } from \"./about.module.css\";\n\n\nconst AboutPage = () => {\n  return(\n    <Layout>\n\n      <section className={container}>\n        <div className={insideContainer}>\n          <h1>About</h1>\n          <ContactText/>\n        </div>\n\n      </section>\n\n    </Layout>\n  )\n}\n\nexport default AboutPage","// extracted by mini-css-extract-plugin\nexport var container = \"about-module--container--41d1b\";\nexport var insideContainer = \"about-module--inside-container--37fc5\";","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","a","_provideComponents","components","React","href","wrapper","MDXLayout","className","container","insideContainer","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}