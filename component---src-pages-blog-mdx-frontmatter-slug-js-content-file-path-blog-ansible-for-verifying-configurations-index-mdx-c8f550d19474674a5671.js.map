{"version":3,"file":"component---src-pages-blog-mdx-frontmatter-slug-js-content-file-path-blog-ansible-for-verifying-configurations-index-mdx-c8f550d19474674a5671.js","mappings":"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","sources":["webpack://cloudqubes/./blog/ansible-for-verifying-configurations/index.mdx","webpack://cloudqubes/./src/pages/blog/{mdx.frontmatter__slug}.js","webpack://cloudqubes/./src/components/layout.module.css","webpack://cloudqubes/./src/components/layout.js","webpack://cloudqubes/./src/hooks/use-site-metadata.jsx","webpack://cloudqubes/./src/components/seo.js","webpack://cloudqubes/./src/pages/blog/article.module.css","webpack://cloudqubes/./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    code: \"code\",\n    h1: \"h1\",\n    pre: \"pre\",\n    a: \"a\",\n    h2: \"h2\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n    class: \"header-highlight\"\n  }, React.createElement(_components.p, null, \"You are already using Ansible for configuring Linux servers. Here's how to use Ansible for verifing configurations.\")), \"\\n\", React.createElement(_components.p, null, \"Ansible is a handy tool for configuration management.\"), \"\\n\", React.createElement(_components.p, null, \"Sometimes, you want to verify configurations without actually changing. You can do that with Ansible \", React.createElement(_components.code, null, \"assert\"), \" module.\"), \"\\n\", React.createElement(_components.p, null, \"The \", React.createElement(_components.code, null, \"assert\"), \" module can evaluate Jinja2 expressions. Coupled with Ansible variable assignment, you can write Ansible playbooks to check for specific configuration parameters.\"), \"\\n\", React.createElement(_components.h1, null, \"How to use Ansible assert\"), \"\\n\", React.createElement(_components.p, null, \"The \", React.createElement(_components.code, null, \"assert\"), \" module accepts three main parameters.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-yaml\"\n  }, \"  - name: task name\\n    ansible.builtin.assert:\\n      that: \\n      - \\\"condition\\\"\\n      success_msg: \\\"Success message\\\"\\n      fail_msg: \\\"Fail message\\\" \\n\")), \"\\n\", React.createElement(_components.p, null, \"The parameter \", React.createElement(_components.code, null, \"that\"), \" is a list of Jinja2 expressions.\"), \"\\n\", React.createElement(_components.p, null, \"The task prints the \", React.createElement(_components.code, null, \"success_msg\"), \" if all the expressions are evaluated true or \", React.createElement(_components.code, null, \"fail_msg\"), \" if any expression is false.\"), \"\\n\", React.createElement(_components.p, null, \"To build the Jinja2 expressions we can use Ansible variables.\"), \"\\n\", React.createElement(_components.h1, null, \"Registering variables\"), \"\\n\", React.createElement(_components.p, null, \"An Ansible task is an invocation of an Ansible module which returns a value. The \", React.createElement(_components.code, null, \"register\"), \" keyword stores this value in memory and makes it available for subsequent tasks.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-yaml\"\n  }, \"- name: list files\\n  ansible.builtin.command:\\n    cmd: ls -k /home/ubuntu\\n  register: cmd_ls\\n\")), \"\\n\", React.createElement(_components.p, null, \"The \", React.createElement(_components.code, null, \"list files\"), \" task invokes the module \", React.createElement(_components.code, null, \"cmd\"), \" which executes the Linux command \", React.createElement(_components.code, null, \"ls -k /home/ubuntu\"), \". The task stores the return value in the variable \", React.createElement(_components.code, null, \"cmd_ls\"), \". Any task that comes below this task in the play, can refer the variable \", React.createElement(_components.code, null, \"cmd_ls\"), \".\"), \"\\n\", React.createElement(_components.p, null, \"Let's inspect the variable using the \", React.createElement(_components.code, null, \"debug\"), \" module.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-yaml\"\n  }, \"- name: debug cmd_ls\\n  ansible.builtin.debug:\\n    var: cmd_ls\\n\")), \"\\n\", React.createElement(_components.p, null, \"The complete playbook \", React.createElement(_components.code, null, \"variable-test.yml\"), \" is available in \", React.createElement(_components.a, {\n    href: \"https://github.com/cloudqubes/ansible_assert\"\n  }, \"ansible_assert\"), \" GitHub repository. Clone the repo and run the playbook to check the output.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-shell\"\n  }, \"TASK [debug cmd_ls] ********************************************************************************************************************************************************************************\\nok: [740-1-k8s1] => {\\n    \\\"cmd_ls\\\": {\\n        \\\"changed\\\": true,\\n        \\\"cmd\\\": [\\n            \\\"ls\\\",\\n            \\\"-k\\\",\\n            \\\"/home/ubuntu\\\"\\n        ],\\n        \\\"delta\\\": \\\"0:00:00.005862\\\",\\n        \\\"end\\\": \\\"2023-06-10 15:00:20.355971\\\",\\n        \\\"failed\\\": false,\\n        \\\"msg\\\": \\\"\\\",\\n        \\\"rc\\\": 0,\\n        \\\"start\\\": \\\"2023-06-10 15:00:20.350109\\\",\\n        \\\"stderr\\\": \\\"\\\",\\n        \\\"stderr_lines\\\": [],\\n        \\\"stdout\\\": \\\"my_file\\\\ntest_file\\\",\\n        \\\"stdout_lines\\\": [\\n            \\\"my_file\\\",\\n            \\\"test_file\\\"\\n        ]\\n    }\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, \"As you can see from this output, the return value of the \", React.createElement(_components.code, null, \"cmd\"), \" module is a Python dictionary.\"), \"\\n\", React.createElement(_components.p, null, \"Most Ansible modules return a similar data structure. You can use the keys and valuse in this data structure for building the Jinja2 expressions for \", React.createElement(_components.code, null, \"that\"), \" parameter in the \", React.createElement(_components.code, null, \"assert\"), \" module.\"), \"\\n\", React.createElement(_components.h1, null, \"Usecases\"), \"\\n\", React.createElement(_components.p, null, \"Let's see some usecases for verifying configurations with Ansible \", React.createElement(_components.code, null, \"assert\"), \".\"), \"\\n\", React.createElement(_components.h2, null, \"Check the existence of a file\"), \"\\n\", React.createElement(_components.p, null, \"The module \", React.createElement(_components.code, null, \"stat\"), \" can retrieve status of files and directories.\"), \"\\n\", React.createElement(_components.p, null, \"This task retrieves the status of \", React.createElement(_components.code, null, \"test_file\"), \" in the user's home directory.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-yaml\"\n  }, \"- name: Get status of test_file\\n  ansible.builtin.stat:\\n    path: /home/ubuntu/test_file\\n  register: test_file_1\\n\")), \"\\n\", React.createElement(_components.p, null, \"Inspect the contents of the \", React.createElement(_components.code, null, \"test_file_1\"), \" variable with debug.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-yaml\"\n  }, \"  - name: debug test_file_1\\n    ansible.builtin.debug:\\n      var: test_file_1\\n\")), \"\\n\", React.createElement(_components.p, null, \"Task output.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-shell\"\n  }, \"TASK [debug test_file_1] ***************************************************************************************************************************************************************************\\nok: [740-1-k8s1] => {\\n    \\\"test_file_1\\\": {\\n        \\\"changed\\\": false,\\n        \\\"failed\\\": false,\\n        \\\"stat\\\": {\\n            \\\"atime\\\": 1686121585.736978,\\n            \\\"attr_flags\\\": \\\"e\\\",\\n            \\\"attributes\\\": [\\n                \\\"extents\\\"\\n            ],\\n            \\\"block_size\\\": 4096,\\n            \\\"blocks\\\": 8,\\n            \\\"charset\\\": \\\"us-ascii\\\",\\n            \\\"checksum\\\": \\\"6f2170a833122bdfb8382742c2ca693a36c3ac58\\\",\\n            \\\"ctime\\\": 1685828081.3049781,\\n            \\\"dev\\\": 2049,\\n            \\\"device_type\\\": 0,\\n            \\\"executable\\\": false,\\n            \\\"exists\\\": true,\\n            \\\"gid\\\": 1000,\\n            \\\"gr_name\\\": \\\"ubuntu\\\",\\n            \\\"inode\\\": 258118,\\n            \\\"isblk\\\": false,\\n            \\\"ischr\\\": false,\\n            \\\"isdir\\\": false,\\n            \\\"isfifo\\\": false,\\n            \\\"isgid\\\": false,\\n            \\\"islnk\\\": false,\\n            \\\"isreg\\\": true,\\n            \\\"issock\\\": false,\\n            \\\"isuid\\\": false,\\n            \\\"mimetype\\\": \\\"text/plain\\\",\\n            \\\"mode\\\": \\\"0664\\\",\\n            \\\"mtime\\\": 1685828081.3049781,\\n            \\\"nlink\\\": 1,\\n            \\\"path\\\": \\\"/home/ubuntu/test_file\\\",\\n            \\\"pw_name\\\": \\\"ubuntu\\\",\\n            \\\"readable\\\": true,\\n            \\\"rgrp\\\": true,\\n            \\\"roth\\\": true,\\n            \\\"rusr\\\": true,\\n            \\\"size\\\": 45,\\n            \\\"uid\\\": 1000,\\n            \\\"version\\\": \\\"1457468022\\\",\\n            \\\"wgrp\\\": true,\\n            \\\"woth\\\": false,\\n            \\\"writeable\\\": true,\\n            \\\"wusr\\\": true,\\n            \\\"xgrp\\\": false,\\n            \\\"xoth\\\": false,\\n            \\\"xusr\\\": false\\n        }\\n    }\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, \"The \", React.createElement(_components.code, null, \"stat\"), \" module returns a range of key-value pairs that represent multiple parameters about the file. Some keys are self explanatory. Refer the \", React.createElement(_components.a, {\n    href: \"https://docs.ansible.com/ansible/latest/collections/ansible/builtin/stat_module.html\"\n  }, \"Stat module docs\"), \" for interpretation of the others.\"), \"\\n\", React.createElement(_components.p, null, \"Here are three usefule keys and how to use them in Jinja2 expressions in \", React.createElement(_components.code, null, \"assert\"), \" module.\"), \"\\n\", React.createElement(_components.p, null, \"The \", React.createElement(_components.code, null, \"exists\"), \" key is a boolean representation of the existence of the file.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-yaml\"\n  }, \"- name: assert test_file exists\\n  ansible.builtin.assert:\\n    that: \\n    - \\\"test_file.stat.exists\\\"\\n    success_msg: \\\"OK: test_file exists\\\"\\n    fail_msg: \\\"NOK: test_file does not exists\\\"\\n\")), \"\\n\", React.createElement(_components.p, null, \"The \", React.createElement(_components.code, null, \"pw_name\"), \" key holds the username of the owner. We will check whether the value equals \", React.createElement(_components.code, null, \"ubuntu\"), \".\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-yaml\"\n  }, \"  - name: assert test_file owner username is ubuntu\\n    ansible.builtin.assert:\\n      that: \\n      - \\\"test_file.stat.pw_name == 'ubuntu'\\\"\\n      success_msg: \\\"OK: test_file owner is ubuntu\\\"\\n      fail_msg: \\\"NOK: test_file owner is not ubuntu\\\"\\n\")), \"\\n\", React.createElement(_components.p, null, \"The \", React.createElement(_components.code, null, \"gr_name\"), \" key holds the group name of owner and here's how we check whether the owner does not belong to the \", React.createElement(_components.code, null, \"root\"), \" user group.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-yaml\"\n  }, \"  - name: assert test_file owner group name is not root\\n    ansible.builtin.assert:\\n      that: \\n      - \\\"test_file.stat.gr_name != 'root'\\\"\\n      success_msg: \\\"OK: test_file owner group is not root\\\"\\n      fail_msg: \\\"NOK: test_file owner group is root\\\"\\n\")), \"\\n\", React.createElement(_components.p, null, \"Create the file \", React.createElement(_components.code, null, \"/home/ubuntu/test_file\"), \" and run the playbook \", React.createElement(_components.code, null, \"file-check.yml\"), \" in the \", React.createElement(_components.a, {\n    href: \"https://github.com/cloudqubes/ansible_assert\"\n  }, \"ansible_assert\"), \" to see the output.\"), \"\\n\", React.createElement(_components.h2, null, \"Check the contents of a file\"), \"\\n\", React.createElement(_components.p, null, \"The Ansible module \", React.createElement(_components.code, null, \"command\"), \" can run Linux commands.\\nLet's run \", React.createElement(_components.code, null, \"cat\"), \" command with the \", React.createElement(_components.code, null, \"test_file\"), \" and inpect the contents.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-yaml\"\n  }, \"  - name: cat test_file\\n    ansible.builtin.command:\\n      cmd: cat /home/ubuntu/test_file\\n    register: test_file\\n\")), \"\\n\", React.createElement(_components.p, null, \"Here's the debug output of the `test_file.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-yaml\"\n  }, \"TASK [debug test_file] *****************************************************************************************************************************************************************************\\nok: [740-1-k8s1] => {\\n    \\\"test_file\\\": {\\n        \\\"changed\\\": true,\\n        \\\"cmd\\\": [\\n            \\\"cat\\\",\\n            \\\"/home/ubuntu/test_file\\\"\\n        ],\\n        \\\"delta\\\": \\\"0:00:00.005361\\\",\\n        \\\"end\\\": \\\"2023-06-07 07:32:53.087623\\\",\\n        \\\"failed\\\": false,\\n        \\\"msg\\\": \\\"\\\",\\n        \\\"rc\\\": 0,\\n        \\\"start\\\": \\\"2023-06-07 07:32:53.082262\\\",\\n        \\\"stderr\\\": \\\"\\\",\\n        \\\"stderr_lines\\\": [],\\n        \\\"stdout\\\": \\\"test_string\\\\nnew string\\\\nThis string is in fil\\\",\\n        \\\"stdout_lines\\\": [\\n            \\\"test_string\\\",\\n            \\\"new string\\\",\\n            \\\"This string is in fil\\\"\\n        ]\\n    }\\n}\\n\\n\")), \"\\n\", React.createElement(_components.p, null, \"The \", React.createElement(_components.code, null, \"test_file.stdout\"), \" contains the output of the \", React.createElement(_components.code, null, \"cat\"), \" command.\\nWe can use it in Jinja2 expressions to check the contents of the file.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-yaml\"\n  }, \"  - name: assert line in file\\n    ansible.builtin.assert:\\n      that: \\n      - \\\"'This string is in file' in test_file.stdout\\\"\\n      success_msg: \\\"OK: String is in file\\\"\\n      fail_msg: \\\"NOK: String is not in file\\\"\\n\\n  - name: assert line not in file\\n    ansible.builtin.assert:\\n      that: \\n      - \\\"'This string is not in file' not in test_file.stdout\\\"\\n      success_msg: \\\"OK: String is not in file\\\"\\n      fail_msg: \\\"NOK: String is in file\\n\")), \"\\n\", React.createElement(_components.p, null, \"Refer \", React.createElement(_components.code, null, \"file-content-check.yml\"), \" in the \", React.createElement(_components.a, {\n    href: \"https://github.com/cloudqubes/ansible_assert\"\n  }, \"ansible_assert\"), \" for the complete playbook.\"), \"\\n\", React.createElement(_components.h2, null, \"Check the status of a service\"), \"\\n\", React.createElement(_components.p, null, \"The module \", React.createElement(_components.code, null, \"ansible.builtin.service_facts\"), \" can rerieve information related to services and store them in \", React.createElement(_components.code, null, \"ansible_facts.services\"), \" variable.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-yaml\"\n  }, \"  - name: Populate service facts\\n    ansible.builtin.service_facts:\\n\")), \"\\n\", React.createElement(_components.p, null, \"Let's print the \", React.createElement(_components.code, null, \"ansible_facts.services\"), \" to see what it contains.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-yaml\"\n  }, \"- name: Print service facts\\n  ansible.builtin.debug:\\n    var: ansible_facts.services\\n\")), \"\\n\", React.createElement(_components.p, null, \"We get a list of the services installed in the target system.\"), \"\\n\", React.createElement(_components.p, null, \"Note that a part of the output is omitted for brevity.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-shell\"\n  }, \"TASK [Print service facts] *************************************************************************************************************************************************************************\\nok: [740-1-k8s1] => {\\n    \\\"ansible_facts.services\\\": {\\n        \\\"ModemManager.service\\\": {\\n            \\\"name\\\": \\\"ModemManager.service\\\",\\n            \\\"source\\\": \\\"systemd\\\",\\n            \\\"state\\\": \\\"running\\\",\\n            \\\"status\\\": \\\"enabled\\\"\\n        },\\n        \\\"NetworkManager.service\\\": {\\n            \\\"name\\\": \\\"NetworkManager.service\\\",\\n            \\\"source\\\": \\\"systemd\\\",\\n            \\\"state\\\": \\\"stopped\\\",\\n            \\\"status\\\": \\\"not-found\\\"\\n        },\\n        \\\"accounts-daemon.service\\\": {\\n            \\\"name\\\": \\\"accounts-daemon.service\\\",\\n            \\\"source\\\": \\\"systemd\\\",\\n            \\\"state\\\": \\\"running\\\",\\n            \\\"status\\\": \\\"enabled\\\"\\n        },\\n        \\\"apparmor\\\": {\\n            \\\"name\\\": \\\"apparmor\\\",\\n            \\\"source\\\": \\\"sysv\\\",\\n            \\\"state\\\": \\\"running\\\"\\n        },\\n...\\n\")), \"\\n\", React.createElement(_components.p, null, \"Check whether \", React.createElement(_components.code, null, \"apparmor\"), \" service is running.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-yaml\"\n  }, \"  - name: assert apparmor is running\\n    ansible.builtin.assert:\\n      that: \\n      - \\\"ansible_facts.services.apparmor.state == 'running'\\\"\\n      success_msg: \\\"OK: apparmor is running\\\"\\n      fail_msg: \\\"NOK: apparmor is not running\\\"\\n\")), \"\\n\", React.createElement(_components.p, null, \"Some service names hava a dot notation such as \", React.createElement(_components.code, null, \"ssh.service\"), \".\\nFor accessing such keys use the Python array notations - single quoted key within square brackets.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-yaml\"\n  }, \"  - name: assert ssh.service is running\\n    ansible.builtin.assert:\\n      that: \\n      - \\\"ansible_facts.services['ssh.service'].state == 'running'\\\"\\n      success_msg: \\\"OK: ssh.service is running\\\"\\n      fail_msg: \\\"NOK: ssh.service is not running\\\"\\n\")), \"\\n\", React.createElement(_components.p, null, \"Run the playbook \", React.createElement(_components.code, null, \"service-check.yml\"), \" in the \", React.createElement(_components.a, {\n    href: \"https://github.com/cloudqubes/ansible_assert\"\n  }, \"ansible_assert\"), \" to see the output.\"), \"\\n\", React.createElement(_components.h3, null, \"Check the status of a kernel module\"), \"\\n\", React.createElement(_components.p, null, \"Ansible does not have a module for checking status of Linux kernel modules. But, we can use the \", React.createElement(_components.code, null, \"command\"), \" module to get output of \", React.createElement(_components.code, null, \"lsmod\"), \" and analyze.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-yaml\"\n  }, \"  - name: List loaded kernel modules\\n    ansible.builtin.command:\\n      cmd: \\\"lsmod\\\"\\n    register: loaded_modules\\n\")), \"\\n\", React.createElement(_components.p, null, \"Checking the \", React.createElement(_components.code, null, \"ip_tables\"), \" module status.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-yaml\"\n  }, \"  - name: Check iptables is loaded\\n    ansible.builtin.assert:\\n      that:\\n      - \\\"'ip_tables' in loaded_modules.stdout\\\" \\n      success_msg: \\\"OK: ip_tables is loaded\\\"\\n      fail_msg: \\\"NOK: ip_tables is not loaded\\\"\\n\")), \"\\n\", React.createElement(_components.p, null, \"The \", React.createElement(_components.code, null, \"command\"), \" module does not use the Linux shell to execute commands. So, it cannot interpret \", React.createElement(_components.code, null, \"$\"), \" notations.\\nTo run commands with such notations, use the \", React.createElement(_components.code, null, \"shell\"), \" module.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-yaml\"\n  }, \"  - name: List all kernel modules\\n    ansible.builtin.shell:\\n      cmd: \\\"find /lib/modules/$(uname -r) -name '*.ko*'\\\"\\n    register: all_modules\\n\")), \"\\n\", React.createElement(_components.p, null, \"Run the playbook \", React.createElement(_components.code, null, \"kernel-module-check.yml\"), \" in the \", React.createElement(_components.a, {\n    href: \"https://github.com/cloudqubes/ansible_assert\"\n  }, \"ansible_assert\"), \" to see the output.\"), \"\\n\", React.createElement(_components.h3, null, \"Ignoring errors\"), \"\\n\", React.createElement(_components.p, null, \"Ansible stops execution when a task fails. That's fine for configuring servers.\"), \"\\n\", React.createElement(_components.p, null, \"But, when we are using Ansible for verifying configurations, we need to continue even if a task evaluates to false.\\nSo, when using Ansible for configuration verification set \", React.createElement(_components.code, null, \"ignore errors\"), \" to true in the playbook.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-yaml\"\n  }, \"  ignore_errors: true\\n\")), \"\\n\", React.createElement(_components.h3, null, \"Ansible can do many things\"), \"\\n\", React.createElement(_components.p, null, \"Ansible can do things other than configuring servers. We just used Ansible for verifying configurations. These configuration verification capabilities in Ansible are handy for automating security compliance checking and audits.\"), \"\\n\", React.createElement(_components.p, null, \"In future posts, let's explore more usecases of Ansible.\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/Users/indika/projects/cloudqubes/gatsby/cloudqubes/blog/ansible-for-verifying-configurations/index.mdx\";\nimport * as React from 'react';\nimport {graphql} from \"gatsby\";\nimport Layout from '../../components/layout';\nimport {Seo} from \"../../components/seo\";\nimport {outerContainer, container, title, postMeta} from \"./article.module.css\";\nimport \"./article.css\";\nconst BlogPost = ({data, children}) => {\n  return React.createElement(Layout, {\n    pageTitle: data.mdx.frontmatter.title\n  }, React.createElement(\"div\", {\n    className: outerContainer\n  }, React.createElement(\"article\", {\n    className: container\n  }, React.createElement(\"div\", null, React.createElement(\"span\", {\n    className: postMeta\n  }, data.mdx.frontmatter.date, \" - \"), React.createElement(\"span\", {\n    className: postMeta\n  }, data.mdx.fields.timeToRead.text)), React.createElement(\"h1\", {\n    className: title\n  }, data.mdx.frontmatter.title), children)));\n};\nexport const query = graphql`\n  query ($id: String) {\n    mdx(id: {eq: $id}) {\n      frontmatter {\n        title\n        description\n        tags\n        date(formatString: \"MMMM D, YYYY\")\n      }\n      fields{\n        timeToRead {\n          minutes\n          text\n          time\n          words\n        }\n      }\n    }\n  }\n`;\nexport const Head = ({data}) => React.createElement(Seo, {\n  title: data.mdx.frontmatter.title,\n  description: data.mdx.frontmatter.description\n});\nBlogPost\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(BlogPost, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\n","// extracted by mini-css-extract-plugin\nexport var footer = \"layout-module--footer--ad7d0\";\nexport var footerAbout = \"layout-module--footerAbout--6e9dd\";\nexport var footerCard = \"layout-module--footerCard--8fc61\";\nexport var footerLogo = \"layout-module--footerLogo--cd38c\";\nexport var footerLogoContainer = \"layout-module--footerLogoContainer--67598\";\nexport var footerLogoText = \"layout-module--footerLogoText--58444\";\nexport var innerContainer = \"layout-module--inner-container--df4cb\";\nexport var logo = \"layout-module--logo--ff776\";\nexport var logoContainer = \"layout-module--logo-container--6ca7c\";\nexport var logoText = \"layout-module--logo-text--e7423\";\nexport var mainHeader = \"layout-module--main-header--0975f\";\nexport var navContainer = \"layout-module--nav-container--96fe9\";\nexport var navItem = \"layout-module--nav-item--3670c\";\nexport var navItemList = \"layout-module--nav-item-list--aaad3\";\nexport var socialMediaIcons = \"layout-module--socialMediaIcons--19ec3\";\nexport var socialMediaLink = \"layout-module--socialMediaLink--69be6\";\nexport var socialMediaLogo = \"layout-module--socialMediaLogo--1fd87\";","import * as React from \"react\";\nimport { Link } from \"gatsby\";\nimport { StaticImage } from \"gatsby-plugin-image\";\nimport { mainHeader,\n          innerContainer,\n          navItemList,\n          navItem,\n          logo,\n          logoText,\n          logoContainer,\n          navContainer,\n          footer,\n          footerCard, footerLogoContainer, footerLogo, footerLogoText, footerAbout,\n          socialMediaLogo, socialMediaIcons, socialMediaLink\n } from \"./layout.module.css\";\nimport \"./layout.css\";\n\nconst Layout = ({ pageTitle, children }) => {\n  return (\n    <div>\n      <header className={mainHeader} >\n        <div className={innerContainer}>\n          <div className={logoContainer}>\n            <Link to=\"/\">\n              <StaticImage \n                alt=\"cloudqubes logo\"\n                src=\"../images/logo_v1.png\"\n                className={logo}\n              />\n            </Link>\n            <Link to=\"/\">\n              <h1 className={logoText}>cloudqubes</h1>\n            </Link>\n          </div>\n          <nav className={navContainer}>\n            <ul className={navItemList}>\n              <li className={navItem}><Link to=\"/about\">About</Link></li>\n              <li className={navItem}><Link to=\"/blog\">Blog</Link></li>\n              <li className={navItem}><Link to=\"/contact\">Contact</Link></li>\n              <li className={navItem}><Link to=\"https://cloudqubes.substack.com/\">Newsletter</Link></li>\n            </ul>\n          </nav>\n        </div>\n\n      </header>\n      <main>\n        {children}\n      </main>\n      <footer className={footer}>\n        <div className={innerContainer}>\n          <div className={footerCard}>\n            <div className={footerLogoContainer}>\n              <Link to=\"/\" >\n                <StaticImage \n                  alt=\"cloudqubes logo\"\n                  src=\"../images/logo_v1.png\"\n                  className={footerLogo}\n                />\n              </Link>\n              <Link to=\"/\">\n                <h1 className={footerLogoText}>cloudqubes</h1>\n              </Link>\n            </div>\n            <div>\n              <Link to=\"/about\" className={footerAbout}>\n                About\n              </Link>\n            </div>\n          </div>\n          <div className={footerCard}>\n            <div className={socialMediaIcons}>\n              <Link to=\"https://github.com/cloudqubes\" className={socialMediaLink}>\n                <StaticImage \n                  alt=\"cloudqubes logo\"\n                  src=\"../images/github-mark.png\"\n                  className={socialMediaLogo}\n                />\n              </Link>\n\n              <Link to=\"https://twitter.com/cloudqubes\" className={socialMediaLink}>\n                <StaticImage \n                  alt=\"cloudqubes logo\"\n                  src=\"../images/logo-black.png\"\n                  className={socialMediaLogo}\n                />\n              </Link>\n            </div>\n          </div>\n        </div>\n\n      </footer>\n    </div>\n  )\n}\n\nexport const Head = () => {\n  return\n}\n\nexport default Layout\n\n\n","import { graphql, useStaticQuery } from \"gatsby\"\n\nexport const useSiteMetadata = () => {\n  const data = useStaticQuery(graphql`\n    query {\n      site {\n        siteMetadata {\n          title\n          description\n          twitterUsername\n          image\n          siteUrl\n        }\n      }\n    }\n  `)\n\n  return data.site.siteMetadata\n}\n","import React from \"react\";\nimport { useSiteMetadata } from \"../hooks/use-site-metadata\";\n\nexport const Seo = ({ title, description, pathname, children }) => {\n  const {title: defaultTitle, description: defaultDescription, image, siteUrl, twitterUsername} = useSiteMetadata()\n\n  const seo = {\n    title: title || defaultTitle,\n    description: description || defaultDescription,\n    image: `${siteUrl}${image}`,\n    url: `${siteUrl}${pathname || ''}`,\n    twitterUsername,\n  }\n\n  return (\n    <>\n      <title>{seo.title}</title>\n      <meta name=\"description\" content={seo.description}/>\n      <meta name=\"image\" content={seo.image} />\n      <meta name=\"twitter:card\" content=\"summary_large_image\" />\n      <meta name=\"twitter:title\" content={seo.title} />\n      <meta name=\"twitter:url\" content={seo.url} />\n      <meta name=\"twitter:description\" content={seo.description} />\n      <meta name=\"twitter:image\" content={seo.image} />\n      <meta name=\"twitter:creator\" content={seo.twitterUsername} />\n      <link rel=\"icon\" href=\"data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'><text y='0.9em' font-size='90'>👤</text></svg>\" />\n      {children}\n\n    </>\n  )\n}\n","// extracted by mini-css-extract-plugin\nexport var container = \"article-module--container--2d8cc\";\nexport var outerContainer = \"article-module--outerContainer--119e3\";\nexport var postMeta = \"article-module--post-meta--34964\";\nexport var title = \"article-module--title--f5d32\";","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","code","h1","pre","a","h2","h3","_provideComponents","components","React","class","className","href","wrapper","MDXLayout","BlogPost","_ref","data","children","Layout","pageTitle","mdx","frontmatter","title","outerContainer","container","postMeta","date","fields","timeToRead","text","Head","_ref2","Seo","description","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","footerCard","innerContainer","navItem","socialMediaLink","socialMediaLogo","Link","to","S","alt","src","pathname","defaultTitle","defaultDescription","image","siteUrl","twitterUsername","useStaticQuery","site","siteMetadata","seo","url","name","content","rel","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}