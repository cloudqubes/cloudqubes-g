{"version":3,"file":"component---src-pages-blog-mdx-frontmatter-slug-js-content-file-path-blog-running-applications-on-kubernetes-index-mdx-ebb2699c9ab094dd4296.js","mappings":"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","sources":["webpack://cloudqubes/./blog/running-applications-on-kubernetes/index.mdx","webpack://cloudqubes/./src/pages/blog/{mdx.frontmatter__slug}.js","webpack://cloudqubes/./src/hooks/use-site-metadata.jsx","webpack://cloudqubes/./src/components/seo.js","webpack://cloudqubes/./src/pages/blog/article.module.css","webpack://cloudqubes/./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    img: \"img\",\n    em: \"em\",\n    h1: \"h1\",\n    code: \"code\",\n    pre: \"pre\",\n    ol: \"ol\",\n    li: \"li\",\n    blockquote: \"blockquote\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n    class: \"header-highlight\"\n  }, React.createElement(_components.p, null, \"A containerized application running in Kubernetes is a collection of Pods. Kubernetes takes care of scheduling these Pods across nodes in a cluster.\")), \"\\n\", React.createElement(_components.p, null, \"A containerized application is composed of microservices where each microservice is deployed in a container. A Pod is a group of one or more containers running in the same node.\"), \"\\n\", React.createElement(_components.p, null, \"This is a containerized application with three containers in two Pods.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.img, {\n    src: \"./running-containerized-apps/containerized-app-1.png\",\n    alt: \"A containerized application in Kubernetes\"\n  }), \"\\n\", React.createElement(_components.em, null, \"A containerized application\")), \"\\n\", React.createElement(_components.p, null, \"To run this application in a Kubernetes cluster, we must instruct Kubernetes on how to create the Pods.\\nThere are several methods of doing that.\"), \"\\n\", React.createElement(_components.h1, null, \"Create individual Pods\"), \"\\n\", React.createElement(_components.p, null, \"You can use the \", React.createElement(_components.code, null, \"kubectl\"), \" command to create individual pods.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-shell\"\n  }, \"cloud@ubuntu:~$ microk8s kubectl run nginx --image=nginx\\npod/nginx created\\ncloud@ubuntu:~$ microk8s kubectl get pods\\nNAME   READY   STATUS              RESTARTS   AGE\\nNginx   0/1     ContainerCreating   0          11s\\n\")), \"\\n\", React.createElement(_components.p, null, \"When a Pod is no longer needed, it can be deleted using the \", React.createElement(_components.code, null, \"kubectl delete\"), \" command.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-shell\"\n  }, \"cloud@ubuntu:~$ microk8s kubectl delete pods/nginx\\npod \\\"nginx\\\" deleted\\n\")), \"\\n\", React.createElement(_components.p, null, \"A Pod is an object in Kubernetes. The above commands are directly creating and deleting the Pod objects.\"), \"\\n\", React.createElement(_components.p, null, \"This method is known as managing Kubernetes objects with imperative commands.\"), \"\\n\", React.createElement(_components.p, null, \"It works for creating one or two pods for testing purpose or a one-off task. But, it’s not practical, if not impossible for an application that has hundreds of Pods.\"), \"\\n\", React.createElement(_components.p, null, \"Instead of creating Pods individually, we can use Kubernetes configuration files for such applications.\"), \"\\n\", React.createElement(_components.h1, null, \"Kubernetes configuration files\"), \"\\n\", React.createElement(_components.p, null, \"Kubernetes configuration files are YAML-formatted definitions of Kubernetes objects. A single configuration file can hold definitions of multiple objects. Since a Pod is also an object in Kubernetes, you can use these configuration files for deploying an application with multiple Pods.\"), \"\\n\", React.createElement(_components.h1, null, \"Using configuration files imperatively\"), \"\\n\", React.createElement(_components.p, null, \"Here’s a configuration file with two Pod definitions. The \", React.createElement(_components.code, null, \"spec\"), \" field specifies the configuration of containers in each Pod. Each Pod in this configuration file runs one Nginx container.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-yaml\"\n  }, \"\\napiVersion: v1\\nkind: Pod\\nmetadata:\\n  name: nginx-pod-1\\nspec:\\n  containers:\\n  - name: nginx\\n    image: nginx:1.23.2\\n    ports:\\n    - containerPort: 80\\n        \\n---\\n\\napiVersion: v1\\nkind: Pod\\nmetadata:\\n  name: nginx-pod-2\\nspec:\\n  containers:\\n  - name: nginx\\n    image: nginx:1.23.2\\n    ports:\\n    - containerPort: 80  \\n\")), \"\\n\", React.createElement(_components.p, null, \"The \", React.createElement(_components.code, null, \"kubectl create\"), \" command accepts the file as an input and creates the two pods.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-shell\"\n  }, \"cloud@ubuntu:~/projects/kube-config$ microk8s kubectl create -f nginxpod.yml \\npod/nginx-pod-1 created\\npod/nginx-pod-2 created\\n\")), \"\\n\", React.createElement(_components.p, null, \"Let’s try to amend our application with one more pod by updating the configuration file.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-yaml\"\n  }, \"apiVersion: v1\\nkind: Pod\\nmetadata:\\n  name: nginx-pod-1\\nspec:\\n  containers:\\n  - name: nginx\\n    image: nginx:1.23.2\\n    ports:\\n    - containerPort: 80\\n        \\n---\\n\\napiVersion: v1\\nkind: Pod\\nmetadata:\\n  name: nginx-pod-2\\nspec:\\n  containers:\\n  - name: nginx\\n    image: nginx:1.23.2\\n    ports:\\n    - containerPort: 80     \\n\\n---\\n\\napiVersion: v1\\nkind: Pod\\nmetadata:\\n  name: nginx-pod-3\\nspec:\\n  containers:\\n  - name: nginx\\n    image: nginx:1.23.2\\n    ports:\\n    - containerPort: 80    \\n\")), \"\\n\", React.createElement(_components.p, null, \"Using the \", React.createElement(_components.code, null, \"kubectl create\"), \" command with the updated configuration file.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-shell\"\n  }, \"cloud@ubuntu:~/projects/kube-config$ microk8s kubectl create -f nginxpod.yml \\npod/nginx-pod-3 created\\nError from server (AlreadyExists): error when creating \\\"nginxpod.yml\\\": pods \\\"nginx-pod-1\\\" already exists\\nError from server (AlreadyExists): error when creating \\\"nginxpod.yml\\\": pods \\\"nginx-pod-2\\\" already exists\\ncloud@ubuntu:~/projects/kube-config$ microk8s kubectl get pods\\nNAME          READY   STATUS    RESTARTS   AGE\\nnginx-pod-1   1/1     Running   0          4m25s\\nnginx-pod-2   1/1     Running   0          4m25s\\nnginx-pod-3   1/1     Running   0          27s\\n\")), \"\\n\", React.createElement(_components.p, null, \"It prints an error indicating that \", React.createElement(_components.code, null, \"nginx-pod-1\"), \" and \", React.createElement(_components.code, null, \"nginx-pod-2\"), \" already exist. But, \", React.createElement(_components.code, null, \"nginx-pod-3\"), \" is created.\"), \"\\n\", React.createElement(_components.p, null, \"In this method, we are creating Kubernetes objects imperatively using Kubernetes configuration files. But, there is a better method.\"), \"\\n\", React.createElement(_components.h1, null, \"Using configuration files declaratively\"), \"\\n\", React.createElement(_components.p, null, \"A declarative definition contains the end state we wish to achieve. Therefore, when using the declarative method we use the `kubectl apply’ command. It will scan the configuration file, and amend the cluster to match our definitions.\"), \"\\n\", React.createElement(_components.p, null, \"Remember to delete all Pods created in earlier steps before executing this command.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-shell\"\n  }, \"cloud@ubuntu:~/projects/kube-config$ microk8s kubectl apply -f nginxpod.yml \\npod/nginx-pod-1 created\\npod/nginx-pod-2 created\\npod/nginx-pod-3 created\\n\")), \"\\n\", React.createElement(_components.p, null, \"Let’s try to amend our workload with one more pod.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-yaml\"\n  }, \"apiVersion: v1\\nkind: Pod\\nmetadata:\\n  name: nginx-pod-1\\nspec:\\n  containers:\\n  - name: nginx\\n    image: nginx:1.23.2\\n    ports:\\n    - containerPort: 80\\n        \\n---\\n\\napiVersion: v1\\nkind: Pod\\nmetadata:\\n  name: nginx-pod-2\\nspec:\\n  containers:\\n  - name: nginx\\n    image: nginx:1.23.2\\n    ports:\\n    - containerPort: 80     \\n\\n---\\n\\napiVersion: v1\\nkind: Pod\\nmetadata:\\n  name: nginx-pod-3\\nspec:\\n  containers:\\n  - name: nginx\\n    image: nginx:1.23.2\\n    ports:\\n    - containerPort: 80\\n\\n---\\n\\napiVersion: v1\\nkind: Pod\\nmetadata:\\n  name: nginx-pod-4\\nspec:\\n  containers:\\n  - name: nginx\\n    image: nginx:1.23.2\\n    ports:\\n    - containerPort: 80    \\n\")), \"\\n\", React.createElement(_components.p, null, \"Running the \", React.createElement(_components.code, null, \"kubectl apply\"), \" again.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-shell\"\n  }, \"cloud@ubuntu:~/projects/kube-config$ microk8s kubectl apply -f nginxpod.yml \\npod/nginx-pod-1 unchanged\\npod/nginx-pod-2 unchanged\\npod/nginx-pod-3 unchanged\\npod/nginx-pod-4 created\\n\")), \"\\n\", React.createElement(_components.p, null, \"We are not getting an error this time. Kubernetes can identify that pod-1 to 3 already exists so it’s creating the fourth pod only.\"), \"\\n\", React.createElement(_components.p, null, \"However, running a workload as a collection of individual pods is not a good practice. If our application has hundreds of pods, we would have to copy-paste the pod definition a hundred times. Kubernetes has a higher-level object for such use cases.\"), \"\\n\", React.createElement(_components.h1, null, \"ReplicaSet\"), \"\\n\", React.createElement(_components.p, null, \"A ReplicaSet is a group of pods. This is a definition of a ReplicaSet with three Pods, indicated by \", React.createElement(_components.code, null, \"replicas\"), \" field.\"), \"\\n\", React.createElement(_components.p, null, \"A ReplicaSet can have only one Pod \", React.createElement(_components.code, null, \"spec\"), \".  The Pod spec in this ReplicaSet has one Nginx container and the RelicaSet will create three replicas of this Pod.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-shell\"\n  }, \"apiVersion: apps/v1\\nkind: ReplicaSet\\nmetadata:\\n  name: nginx\\n  labels:\\n    app: webapp\\nspec:\\n  # modify replicas according to your case\\n  replicas: 3\\n  selector:\\n    matchLabels:\\n      webapp: nginx\\n  template:\\n    metadata:\\n      labels:\\n        webapp: nginx\\n    spec:\\n      containers:\\n      - name: nginx\\n        image: nginx:1.23.2\\n        ports:\\n        - containerPort: 80\\n\")), \"\\n\", React.createElement(_components.p, null, \"Using \", React.createElement(_components.code, null, \"kubectl apply\"), \" to create the ReplicaSet\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-shell\"\n  }, \"cloud@ubuntu:~/projects/kube-config$ microk8s kubectl apply -f nginx-replica.yml \\nreplicaset.apps/nginx created\\ncloud@ubuntu:~/projects/kube-config$ microk8s kubectl get rs\\nNAME    DESIRED   CURRENT   READY   AGE\\nnginx   3         3         0       5s\\ncloud@ubuntu:~/projects/kube-config$ microk8s kubectl get rs\\nNAME    DESIRED   CURRENT   READY   AGE\\nnginx   3         3         3       10s\\ncloud@ubuntu:~/projects/kube-config$ microk8s kubectl get pods\\nNAME          READY   STATUS    RESTARTS   AGE\\nnginx-xmlpq   1/1     Running   0          13s\\nnginx-ncbnq   1/1     Running   0          12s\\nnginx-mpvtn   1/1     Running   0          12s\\n\")), \"\\n\", React.createElement(_components.p, null, \"We can easily scale this workload to any number of pods by altering the value of \", React.createElement(_components.code, null, \"spec.replicas\"), \" field.\"), \"\\n\", React.createElement(_components.p, null, \"Let’s update it to 4.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-yaml\"\n  }, \"  replicas: 4\\n\")), \"\\n\", React.createElement(_components.p, null, \"Using the \", React.createElement(_components.code, null, \"kubectl apply\"), \" to update our workload.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-shell\"\n  }, \"cloud@ubuntu:~/projects/kube-config$ microk8s kubectl apply -f nginx-replica.yml \\nreplicaset.apps/nginx configured\\ncloud@ubuntu:~/projects/kube-config$ microk8s kubectl get pods\\nNAME          READY   STATUS    RESTARTS   AGE\\nnginx-xmlpq   1/1     Running   0          2m24s\\nnginx-ncbnq   1/1     Running   0          2m23s\\nnginx-mpvtn   1/1     Running   0          2m23s\\nnginx-4h69h   1/1     Running   0          6s\\n\")), \"\\n\", React.createElement(_components.p, null, \"Scaling down is also easy. Just update the number of replicas to your desired count and run \", React.createElement(_components.code, null, \"kubectl apply\"), \". Here we are bringing down the number of Pods to two.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-shell\"\n  }, \"cloud@ubuntu:~/projects/kube-config$ microk8s kubectl apply -f nginx-replica.yml \\nreplicaset.apps/nginx configured\\ncloud@ubuntu:~/projects/kube-config$ microk8s kubectl get pods\\nNAME          READY   STATUS        RESTARTS   AGE\\nnginx-mpvtn   1/1     Running       0          4m40s\\nnginx-4h69h   1/1     Running       0          2m23s\\nnginx-ncbnq   1/1     Terminating   0          4m40s\\ncloud@ubuntu:~/projects/kube-config$ microk8s kubectl get pods\\nNAME          READY   STATUS    RESTARTS   AGE\\nnginx-mpvtn   1/1     Running   0          4m43s\\nnginx-4h69h   1/1     Running   0          2m26s\\n\")), \"\\n\", React.createElement(_components.p, null, \"ReplicaSets simplify the scaling of a containerized application. You can adjust the number of replicas to match the current load.\"), \"\\n\", React.createElement(_components.p, null, \"However, running standalone ReplicaSets is also not a recommended approach in Kubernetes. Instead, you must use Kubernetes Workloads.\"), \"\\n\", React.createElement(_components.h1, null, \"Kubernetes Workloads\"), \"\\n\", React.createElement(_components.p, null, \"A Kubernetes Workload is a collection of Pods that is managed by a Workload controller. This controller reschedules failed Pods to ensure that the required number of healthy Pods are always available.\"), \"\\n\", React.createElement(_components.p, null, \"Kubernetes has five built-in workload types, and you can create additional types by writing a custom controller.\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"Deployment\"), \"\\n\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"A Deployment consists of Pods that do not need to maintain any persistent states. A typical example is a front-end of a web application. It will consist of a web server such as Nginx and the application logic that is responsible for interacting with databases and serving the HTML views.\"), \"\\n\"), \"\\n\", React.createElement(_components.ol, {\n    start: \"2\"\n  }, \"\\n\", React.createElement(_components.li, null, \"StatefulSet\"), \"\\n\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"Pods in a StatefulSet can maintain persistent states. These Pods can have Kubernetes Persistent Volumes.\"), \"\\n\"), \"\\n\", React.createElement(_components.ol, {\n    start: \"3\"\n  }, \"\\n\", React.createElement(_components.li, null, \"DaemonSet\"), \"\\n\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"A DaemonSet will run a copy of a Pod on all nodes. A DaemonSet is useful for cluster-wide services such as monitoring node health, log collection, etc.\"), \"\\n\"), \"\\n\", React.createElement(_components.ol, {\n    start: \"4\"\n  }, \"\\n\", React.createElement(_components.li, null, \"Job\"), \"\\n\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"A Job is a one-time task. Once a Job is created, Kubernetes will ensure that the specified number of Pods are executed till completion.\"), \"\\n\"), \"\\n\", React.createElement(_components.ol, {\n    start: \"5\"\n  }, \"\\n\", React.createElement(_components.li, null, \"CronJob\"), \"\\n\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"CronJob is a Job that Kubernetes repeats at scheduled intervals.\"), \"\\n\"), \"\\n\", React.createElement(\"div\", {\n    class: \"inline-highlight\"\n  }, React.createElement(_components.p, null, \"All production applications must be managed as Workloads in Kubernetes.\")), \"\\n\", React.createElement(_components.p, null, \"A typical containerized application will be a combination of different types of Workloads.\"), \"\\n\", React.createElement(_components.p, null, \"A web application usually has a set of stateless frontend services and a stateful backend datastore. Therefore, this application must be deployed into Kubernetes using Deployment and StatefulSets Workloads.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.img, {\n    src: \"./running-containerized-apps/containerized-app-2.png\",\n    alt: \"A containerized web application\"\n  }), \"\\n\", React.createElement(_components.em, null, \"A web application with frontend and backend pods.\")), \"\\n\", React.createElement(_components.p, null, \"If we are to enhance this web application with a newsletter service, we can add a new Pod of type CronJob.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.img, {\n    src: \"./running-containerized-apps/containerized-app-3.png\",\n    alt: \"A containerized web application with a CronJob\"\n  }), \"\\n\", React.createElement(_components.em, null, \"A web application including a CronJob.\")), \"\\n\", React.createElement(_components.h1, null, \"Creating a Deployment\"), \"\\n\", React.createElement(_components.p, null, \"This is a definition of a Deployment that runs two replicas of an Nginx Pod.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-yaml\"\n  }, \"apiVersion: apps/v1\\nkind: Deployment\\nmetadata:\\n  name: nginx-deployment\\nspec:\\n  selector:\\n    matchLabels:\\n      app: nginx\\n  replicas: 2 \\n  template:\\n    metadata:\\n      labels:\\n        app: nginx\\n    spec:\\n      containers:\\n      - name: nginx\\n        image: nginx:1.23.2\\n        ports:\\n        - containerPort: 80\\n\")), \"\\n\", React.createElement(_components.p, null, \"Using \", React.createElement(_components.code, null, \"kubectl apply\"), \" to create the deployment\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-shell\"\n  }, \"cloud@ubuntu:~/projects/kube-config$ microk8s kubectl apply -f nginx.yml \\ndeployment.apps/nginx-deployment created\\ncloud@ubuntu:~/projects/kube-config$ microk8s kubectl get pods\\nNAME                                READY   STATUS              RESTARTS   AGE\\nnginx-deployment-86956f97b8-h4t6p   0/1     ContainerCreating   0          7s\\nnginx-deployment-86956f97b8-wms8g   0/1     ContainerCreating   0          7s\\ncloud@ubuntu:~/projects/kube-config$ microk8s kubectl get pods\\nNAME                                READY   STATUS    RESTARTS   AGE\\nnginx-deployment-86956f97b8-h4t6p   1/1     Running   0          36s\\nnginx-deployment-86956f97b8-wms8g   1/1     Running   0          36s\\n\")), \"\\n\", React.createElement(_components.p, null, \"Query the Deployment and the ReplicaSet within the Deployment with \", React.createElement(_components.code, null, \"kubectl\"), \".\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-shell\"\n  }, \"cloud@ubuntu:~/projects/kube-config$ microk8s kubectl get deployment\\nNAME               READY   UP-TO-DATE   AVAILABLE   AGE\\nnginx-deployment   2/2     2            2           3m37s\\ncloud@ubuntu:~/projects/kube-config$ microk8s kubectl get rs\\nNAME                          DESIRED   CURRENT   READY   AGE\\nnginx-deployment-86956f97b8   2         2         2       3m41s\\ncloud@ubuntu:~/projects/kube-config$ \\n\")), \"\\n\", React.createElement(_components.p, null, \"All types of Kubernetes Workloads can be created using configuration files like this.\\nWe will dig into more details about each type of Workload in a series of upcoming articles.\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/Users/indika/projects/cloudqubes/gatsby/cloudqubes/blog/running-applications-on-kubernetes/index.mdx\";\nimport * as React from 'react';\nimport {graphql} from \"gatsby\";\nimport Layout from '../../components/layout';\nimport {Seo} from \"../../components/seo\";\nimport {outerContainer, container, title, postMeta} from \"./article.module.css\";\nimport \"./article.css\";\nconst BlogPost = ({data, children}) => {\n  return React.createElement(Layout, {\n    pageTitle: data.mdx.frontmatter.title\n  }, React.createElement(\"div\", {\n    className: outerContainer\n  }, React.createElement(\"article\", {\n    className: container\n  }, React.createElement(\"div\", null, React.createElement(\"span\", {\n    className: postMeta\n  }, data.mdx.frontmatter.date, \" - \"), React.createElement(\"span\", {\n    className: postMeta\n  }, data.mdx.fields.timeToRead.text)), React.createElement(\"h1\", {\n    className: title\n  }, data.mdx.frontmatter.title), children)));\n};\nexport const query = graphql`\n  query ($id: String) {\n    mdx(id: {eq: $id}) {\n      frontmatter {\n        title\n        description\n        tags\n        date(formatString: \"MMMM D, YYYY\")\n      }\n      fields{\n        timeToRead {\n          minutes\n          text\n          time\n          words\n        }\n      }\n    }\n  }\n`;\nexport const Head = ({data}) => React.createElement(Seo, {\n  title: data.mdx.frontmatter.title,\n  description: data.mdx.frontmatter.description\n});\nBlogPost\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(BlogPost, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\n","import { graphql, useStaticQuery } from \"gatsby\"\n\nexport const useSiteMetadata = () => {\n  const data = useStaticQuery(graphql`\n    query {\n      site {\n        siteMetadata {\n          title\n          description\n          twitterUsername\n          image\n          siteUrl\n        }\n      }\n    }\n  `)\n\n  return data.site.siteMetadata\n}\n","import React from \"react\";\nimport { useSiteMetadata } from \"../hooks/use-site-metadata\";\n\nexport const Seo = ({ title, description, pathname, children }) => {\n  const {title: defaultTitle, description: defaultDescription, image, siteUrl, twitterUsername} = useSiteMetadata()\n\n  const seo = {\n    title: title || defaultTitle,\n    description: description || defaultDescription,\n    image: `${siteUrl}${image}`,\n    url: `${siteUrl}${pathname || ''}`,\n    twitterUsername,\n  }\n\n  return (\n    <>\n      <title>{seo.title}</title>\n      <meta name=\"description\" content={seo.description}/>\n      <meta name=\"image\" content={seo.image} />\n      <meta name=\"twitter:card\" content=\"summary_large_image\" />\n      <meta name=\"twitter:title\" content={seo.title} />\n      <meta name=\"twitter:url\" content={seo.url} />\n      <meta name=\"twitter:description\" content={seo.description} />\n      <meta name=\"twitter:image\" content={seo.image} />\n      <meta name=\"twitter:creator\" content={seo.twitterUsername} />\n      <link rel=\"icon\" href=\"data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'><text y='0.9em' font-size='90'>👤</text></svg>\" />\n      {children}\n\n    </>\n  )\n}\n","// extracted by mini-css-extract-plugin\nexport var container = \"article-module--container--2d8cc\";\nexport var outerContainer = \"article-module--outerContainer--119e3\";\nexport var postMeta = \"article-module--post-meta--34964\";\nexport var title = \"article-module--title--f5d32\";","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","img","em","h1","code","pre","ol","li","blockquote","_provideComponents","components","React","class","src","alt","className","start","wrapper","MDXLayout","BlogPost","_ref","data","children","Layout","pageTitle","mdx","frontmatter","title","outerContainer","container","postMeta","date","fields","timeToRead","text","Head","_ref2","Seo","description","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","pathname","defaultTitle","defaultDescription","image","siteUrl","twitterUsername","useStaticQuery","site","siteMetadata","seo","url","name","content","rel","href","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}